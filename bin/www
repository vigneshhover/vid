#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('videoconferenceapp:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.Server(app);

const io = require('socket.io')(server);


let socketUser = {};

let user = [];


io.on('connection', function(socket) {


    socket.on("connectUser", function(userId) {

        socketUser[userId] = socket.id;

        if (user.indexOf(userId) < 0) {

            user.push(userId);

        }

        socket.emit('userList', user);

        socket.broadcast.emit('userList', user);


    })


    socket.on("requestToDoctor", function(data) {

        socket.to(socketUser[data.doctorId]).emit("requestFromClient", data)


    })


    socket.on("requestAccept", function(data) {

        socket.to(socketUser[data.doctorId]).emit("requestFromClient", data)

    })

   socket.on("doctorRejected", function(data) {

        socket.to(socketUser[data.clientId]).emit("doctorRejectedToClient", data)

    })

    socket.on('doctorDisconnected', function(connectionData) {

        socket.to(socketUser[connectionData.clientId]).emit("doctorDisconnectedToClient",connectionData)

    })

     socket.on('doctorAccepted', function(data, connectionData) {

        socket.to(socketUser[connectionData.clientId]).emit("doctorScreen", data, connectionData)

    })



    socket.on('clientSharing', function(data, connectionData) {

        // this.broadcast.emit("BackAnswer", data)

        socket.to(socketUser[connectionData.doctorId]).emit("clientScreen", data, connectionData)

    })





    socket.on('OfferUser', function(data, userId) {

        socket.to(socketUser[userId]).emit("BackOffer", data)

    })


    socket.on('Answer', SendAnswer)

    // socket.on('disconnect', Disconnect)

})




function SendOffer(offer) {

    this.broadcast.emit("BackOffer", offer)

}


function SendAnswer(data) {

    this.broadcast.emit("BackAnswer", data)

}




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}